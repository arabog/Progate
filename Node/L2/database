
MySQL is one of d systems for managing databases

Using MySQL
To use MySQL with Node.js, you need to connect them. 

Installing the mysql Package
To connect MySQL to Node.js, you'll need to use the mysql package. 
This is the same as when we installed a package to set up Express in Study I.

npm install mysql

Connecting to MySQL
We'll import the mysql package and then use the createConnection method. We'll store the required information in a constant called connection. This will complete the MySQL connection process.

How to Run Queries
To run a query to the database from Node.js, you can write connection.query(A, B), where A is the query and B is a function that runs after the query is completed (a callback).

const connection = mysql.createConnection(...);

connection.query(
          'SELECT * FROM items',        //query
          () => {
                    <!-- display d list page -->
          }
)

Query Callback
The query callback can take two arguments. The first is error which will contain error information if the query fails and the second is results which will contain the result of the query.

connection.query(
          'SELECT * FROM items',        //query
          (error, results) => {
                    <!-- display d list page -->
                    console.log(results)
                    res.render('index.ejs)
          }
)

query results r displayed in an array


Passing Values to EJS
With EJS, you can access values through the render method. By writing {property: value} in the second argument of the render method, you can pass values to the EJS side.

app.js
connection.query(
          'SELECT * FROM items',        //query
          (error, results) => {
                    res.render('index.ejs, {items: results})
          }
)

index.ejs
<% items.forEach(item) { %>

Set Up the Routing for Creating Items
p until now, we've used app.get, but this time we'll use app.post. These methods called GET and POST refer to the types of requests. 

What are GET and POST?
When you make a request to the server, there are rules for specifying what kind of process you're requesting.

Setting Up the Form
For creating the form, we'll use the HTML <form> tag. Based on the routing, we'll set the action attribute to the destination URL and the method to post or get.

Getting the Input Value (1)
By setting the name attribute of the input element, you can send information in the form of an object to the server. Then on the server-side, you can get the form value using req.body.nameValue

<input type="text" name="itemName">

Getting the Input Value (1)
To get values from forms, you need to add the source code below in app.js.

<!-- required configuration to access form values -->
app.use(express.urlencoded({extended: false}))

<!-- route -->
app.post("/create", (req, res) => {
          console.log(req.body.itemName) // get d form value
})


Adding Data
We can use the query method just as we did with SELECT to run INSERT. The id of the items table has AUTO INCREMENT set, so we don't have to worry about setting the id.

Adding a List Item
To use the value from the form in the query, we need to give a ? to VALUES. Next, we need to pass an array containing the values we want into the second argument of connection.query(). The elements of this array will go into the ? and the query will be run.

add a query that inserts the form value into the name column of the items table. For adding to the name column use ?.

app.post('/create', (req, res) => {
          // Write a query to add data to the database
          connection.query(
                    "INSERT INTO items (name) VALUES(?)",
                    [req.body.itemName],
                    (error, results) => {
                              connection.query(
                                        'SELECT * FROM items',
                                        (error, results) => {
                                                  res.render('index.ejs', {items: results});
                                        }
                              );
                    }
          )
  
});


What is a Redirect?
The server can return a response saying "next make a request to this URL." When the browser receives this, it will automatically make a request to the specified URL. This process of making another request to a different URL is called a redirect.

Reloading After a Redirect
By using a redirect, we can make a request to /index after an item is created and display the list page. By doing this, reloading the page after creating a list item won't restart the creation process and list items won't be added.

How to Use a Redirect
After adding a list item let's redirect to the list page (/index). For making a redirect, use the res.redirect method and pass the URL as the argument.

app.post('/create', (req, res) => {
          // Write a query to add data to the database
          connection.query(
                    "INSERT INTO items (name) VALUES(?)",
                    [req.body.itemName],
                    (error, results) => {
                              
                              res.redirect('/index);
                    }
          )
  
});


Using Redirect
There are multiple situations where a redirect is useful, especially like here when we make a request using the post method. In cases like this, instead of using res.render we use res.redirect and redirect to a get route.

For POST use a Redirect




#Progate @progateEN @dev_careers #dev_careers
