Debugging means "to get rid of bugs". A bug is an 
occurrence when the program does not work in the 
intended manner. When program processes are 
stopped and errors occur, these are also known 
as bugs.

In other words, debugging is finding the origin 
of bugs and fixing them.


The Debug Process:
Step 1: Grasp and understand the details of the error.
Step 2: Predict the cause or origin of the error.
Step 3: Check your prediction step by step and confirm the issue. 

Welcome to the debugging course!
First, you'll learn how to debug step by step.

Que: Let's understand the details of the error!
An error message that contains the specific content of the error 
is being displayed (in d browser).

Next, we'll check the errors that are displayed in the terminal.

Error messages can contain information that is necessary for debugging
For example, this error message contains the location of where the error is triggered, as shown below.
TypeError: /home/progate/list-app/views/index.ejs:24

2. Let's predict the cause!
Think about the cause of the error and make your own predictions.
We're trying to use an iterative method on an array, but based on the content of the error message, we can assume that the foreach call may be wrong.


3. Let's see if our prediction is correct!
Let's check out the foreach method.
Check out the foreach method and find out what's wrong with it by doing the following:
ãƒ»Search for JavaScript foreach on the Web.

Can you find the mistake?
Rather than foreach, the correct method is forEach 
Now it's time to fix the code.
Fix the items.foreach part with the correct method.

Examples of Errors:
Let's fix the problem of not being able to access the Top page. (ds page can't be reached)

1. Let's understand the details of the error!
First, let's check the errors that appear on the browser.
"This page can't be reached" is being displayed.
Next, let's check the errors that appear in the terminal.

Let's analyze the error message.
The first line shows the location where the error is triggered, as shown below.
/home/progate/list-app/app.js:38
  );
  ^
There seems to be an error around the closing parentheses ) in the connection.query code. The error message also describes the cause as shown below.

SyntaxError means an error in the spelling or grammar of the programming language.

2. Let's predict the cause!
Since it's a syntax error, we can expect the program is written incorrectly.
Also, the content of the error tells us that something else should be written instead of ).

3. Let's see if our prediction is correct!
Can you find the mistake?
If you look near line 38 in app.js, you'll see that the closing curly braces } is missing.

If there are mistakes in app.js like in this exercise, errors can occur when launching the server with app.listen and no URLs will be accessible.


3. Visualizing Errors
When you attempt to add a new item, it is set to not be saved by the database.

Let's fix the bug that occurred in the create function!
1. Let's understand the details of the error!
First, let's see what kind of bug it is.

Let's see if there are any errors printed in the terminal.
This time no error messages are displayed.

2. Let's predict the cause!
We don't have enough information, so let's gather more information as we make our prediction. Since this time it's a bug in the create function, we can assume that the code written for the routing of /create is wrong.

Let's check the code for the route path /create from line 32.

Since the item isn't saved, it seems like that there is an error in the process of adding them to the database.

 connection.query(
    'INSERT INTO items name VALUES (?)',

If an error occurs during the execution of the query, the content of the error is passed to the error argument below.

app.post('/create', (req, res) => {
          connection.query(
                    'INSERT INTO items name VALUES (?)',
                    [req.body.itemName],
                    (error, results) => {
                              res.redirect('/index');
                    }
          );
});

We will print the error argument to check if an error occurred during query execution.

Print the error argument using console.log as shown in the image below.

app.post('/create', (req, res) => {
          connection.query(
                    'INSERT INTO items name VALUES (?)',
                    [req.body.itemName],
                    (error, results) => {
                              console.log(error)

                              res.redirect('/index');
                    }
          );
});

Let's check if there are any errors being printed.
Go to d create route in ds case: localhost:3000/new
and input your desired value then click Create.

2. Go to Terminal to check if errors are printed.
An error is printed. The cause of the error is described in the sqlMessage.

We can assume that there's a mistake in the way the query is written.

3. Let's see if our prediction is correct!
Can you find the mistake?
If you look closely, you'll see that the column name name is not enclosed in a parentheses ().

app.post('/create', (req, res) => {
	connection.query(
		'INSERT INTO items (name) VALUES (?)',
		[req.body.itemName],
		(error, results) => {
                              if (error) {
                                        console.log(error)
                              }

			res.redirect('/index');
		}
	);
});

Although we print error for debugging, it's useful to print the contents of error automatically when a query error occurs 

4. Visualizing Values
I have prepared a problem within the update function. When you send the form information, not only will the original values not be updated with the entered values, the original values within the name column will also disappear.

Let's fix the bugs that occurred in the update function.
1. Let's understand the details of the error!
First let's see what kind of bug it is.
Let's see if there are any errors printed in the terminal.

No error messages are displayed.
The code to print the error, which was added in the previous lesson, also didn't catch any errors.

2. Let's predict the cause!
Like before, let's gather information while making predictions. Since this time, it's a bug in the update function, we can assume that the corresponding routing part of /update/:id is wrong.
Let's check the corresponding code

If you lose the value of the name column when you update, it's possible that you are saving the wrong value.

If you actually print the value in this case, it's easier to see what the value is and find the mistake.
The value of the item is sent to the the server by the form, and is received by req.body.itemName as shown below.

app.post('/update/:id', (req, res) => {
          connection.query(
                    'UPDATE items SET name = ? WHERE id = ?',

                    [req.body.itemName, req.params.id],

                    (error, results) => {
                              if (error) {
                                        console.log(error);
                              }

                              res.redirect('/index');
                    }
          );
});

Let's see what the value looks like.
Print req.body.itemName with console.log in the routing of /update/:id.

app.post('/update/:id', (req, res) => {
          console.log(req.body.itemName)

          connection.query(
                    'UPDATE items SET name = ? WHERE id = ?',

                    [req.body.itemName, req.params.id],

                    (error, results) => {
                              if (error) {
                                        console.log(error);
                              }

                              res.redirect('/index');
                    }
          );
});

Go to the Terminal tab to confirm if there are any errors being printed.

The value of req.body.itemName is undefined, indicating that the form value isn't well received.
Hence, we can make the assumption that the name attribute of the form and the req.body.name attribute doesn't match.

After confirmation, let's delete the console.log line we added earlier. The reason for removing this line is because it is uninformative and is output unconditionally.
In a situation where we have a lot of similar loggings like these, they can spam the log files and make it hard to analyze logs when needed.

3. Let's see if our prediction is correct!
The code of the form for edit is shown in the image below, and we can actually see that the name attribute is not specified!

<form action="/update/<%= item.id %>" method="post">
          <input type="text" value="<%= item.name %>">
          <input type="submit" value="Update">
</form>

On the server side, it's set to req.body.itemName, so you need to specify the corresponding name attribute to the form.

Let's fix the code.
<form action="/update/<%= item.id %>" method="post">
          <input type="text" value="<%= item.name %>"  name="itemName">
          <input type="submit" value="Update">
</form>












#Progate @progateEN @dev_careers #dev_careers
