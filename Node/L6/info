Creating a Sign up Functionality
What's to Be Made
① Sign up Functionality.
② A Functionality to Check User Input and 
③ A Functionality to Securely Handle Passwords.

In this exercise, we're going to create 3 functionalities, let's take a look at them below!
  
1. Sign up
2. Input validation
3. Securing passwords


Displaying a Sign up Page
The Sign up page will be displayed when localhost:3000/signup is accessed.

app.get("/signup", (req, res) => {
          res.render("signup.ejs")
});

Creating a Sign up Form
Let's prepare a form to input the username, email and password for the Sign up page.

The steps are as follows:
1. Prepare the route method to display the Sign up page
2. Display for the Sign up page
3. Prepare the view file and the sign up form
4. Create a link to the Sign up page

Sending the Value of the Sign up Form
Let's send the user information from the sign up form. This information consists of the username, email, and password. We'll also prepare the route path for sign up on the server side, and assign the received user information to the constants.

<form action="/signup" method="post">
          <input type="text" name="username">
           <input type="text" name="email">
            <input type="password" name="password">
</form>

app.post("/signup", (req, res) => {
          const username = req.body.username;
          const email = req.body.email;
          const password = req.body.password;
})


Adding the User to the Database
Let's add the user information that's been assigned to the constants to the users table using the INSERT query. It's not necessary to specify the value of id within the query because AUTO INCREMENT is being set in the id column of the users table!

app.post("/signup", (req, res) => {
          const username = req.body.username;
          const email = req.body.email;
          const password = req.body.password;

          conn.query(
                    "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                    [username, email, password],
                    (error, result) => {
                              <!-- signup process -->
                    }
          )


})


Redirecting to the Articles Page
Once the user has been added to the database, let's redirect to the Articles page (/list).


app.post("/signup", (req, res) => {
          const username = req.body.username;
          const email = req.body.email;
          const password = req.body.password;

          conn.query(
                    "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                    [username, email, password],
                    (error, result) => {
                              res.redirect("/list")
                    }
          )


})

Signing up a User and Logging in Simultaneously
If you were to use the session concept you learned in Node.js Study V, you will be able to sign up and log in simultaneously.

Saving the User ID and Username to the Session Properties

Getting the User ID
When the INSERT query succeeds, the id of the added record is inserted into the insertId of the results object, even if it isn't explicitly set to be inserted. insertId is the new user ID. Let's save it to the session properties.

app.post("/signup", (req, res) => {
          const username = req.body.username;
          const email = req.body.email;
          const password = req.body.password;

          conn.query(
                    "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                    [username, email, password],
                    (error, results) => {
                              req.session.userId = results.insertId;

                              <!-- username 4rm d form. y not 4rm db, results? -->
                              req.session.username = username;

                              res.redirect("/list")
                    }
          )


})

Creating an Empty Input Value Check Function:
You will create a function to check for empty input values so that a new user cannot be created without input, like in the image on the right.

 we will use a middleware function to create a function to check if the user input value is empty or not.

 Learning about Middleware Functions:
 As you learned in Node.js Study I, the client request is known as request and the answer from the server is known as response.

 With Express, the function executed by the server between the request and response interaction is known as the middleware function.

 An Example of a Middleware Function
Actually, all of the functions that you've written up until now to deal with the processes for routing have been middleware functions. The sign up process in route path /signup is an example of middleware function.

          (req, res) => {

                    conn.query(
                              "INSERT INTO users (username, email, ...
                              [username, email, password],
                              ....................
                    )


          }

Adding a Middleware Function
Between returning a response after receiving a request, you can actually make multiple middleware functions. So at this point, let's try adding a middleware function that checks for empty input values.

app.post("/signup", 
          <!-- middleware fxn to be used -->
          (req, res, next) => {
                    console.log("Empty input value check")

                    next();
          },

          (req, res) => {
                    console.log("Sign up")
          }
)

Preventing Empty Inputs in the Sign up Form:
In the middleware function you prepared earlier, you are going to write a process that checks if the input values of the sign up form are empty or not.

This type of structure for checking data is known as validation.

Confirming the Validation Process
This time, we'll make a structure, or validation, to check if the username, email, and password that are input into the sign up form are blank or not. Let's make it where if the values in the form are empty, it's not possible to continue with sign up.

Confirming the Process Flow
The check for if the values in the sign up form are empty or not will be conducted by the middleware that prints "Empty input value check" to the terminal. When empty, the user will be redirected back to the Sign up page.

Validating If the Input Values Are Empty
First, in the middleware function for checking empty input values, let's check if the values in the sign up form are empty. For each username, password, and email, compare it with an empty string using '' (double/single quotes)


app.post("/signup", 

          (req, res, next) => {
                    const username = req.body.username;
                    const email = req.body.email;
                    const password = req.body.password;

                    console.log("Empty input value check")

                    if (username == "") {

                    }

                     if (email == "") {
                              
                    }

                     if (password == "") {
                              
                    }

                    next();
          },

          (req, res) => {

          conn.query(
                    "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                    [username, email, password],
                    (error, results) => {
                              req.session.userId = results.insertId;

                              <!-- username 4rm d form. y not 4rm db, results? -->
                              req.session.username = username;

                              res.redirect("/list")
                    }
          )


})

Adding an Error Message to an Array
If the username or other input values are empty, error messages will be added to the errors array using the push method. Make sure to check the error message by printing it on the terminal.

app.post("/signup", 

          (req, res, next) => {
                    const username = req.body.username;
                    const email = req.body.email;
                    const password = req.body.password;

                    const errors = [];

                    if (username == "") {
                              errors.push("Username is empty");
                    }

                     if (email == "") {
                              errors.push("Email is empty");
                    }

                     if (password == "") {
                              errors.push("Password is empty");
                    }

                    console.log(errors)

                    next();
          },

          (req, res) => {

          conn.query(
                    "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                    [username, email, password],
                    (error, results) => {
                              req.session.userId = results.insertId;

                              req.session.username = username;

                              res.redirect("/list")
                    }
          )


})

Diverging the Flow Based on Emptiness
If the input values are empty, the number of elements in the errors array will be greater than 0. When this happens, let's redirect to the Sign up page. If the input values aren't empty, let's call the next function and the sign up process will continue.

app.post("/signup", 

          (req, res, next) => {
                    const username = req.body.username;
                    const email = req.body.email;
                    const password = req.body.password;

                    const errors = [];

                    if (username === "") {
                              errors.push("Username is empty");
                    }

                     if (email === "") {
                              errors.push("Email is empty");
                    }

                     if (password === "") {
                              errors.push("Password is empty");
                    }

                    if (errors.length > 0) {
                              res.redirect("/signup")
                    }else {
                              next();   // continue with d next step
                    }

          },

          (req, res) => {
                    const username = req.body.username;
                    const email = req.body.email;
                    const password = req.body.password;

                    conn.query(
                              "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                              [username, email, password],
                              (error, results) => {
                                        req.session.userId = results.insertId;

                                        req.session.username = username;

                                        res.redirect("/list")
                              }
                    )


})

In this exercise, we're going to create input validation to check for empty fields.
The steps are as follows:
1. Retrieve the values from the sign up form
2. Check if the values are empty
3. Create a control flow based on the results in point 2.


Displaying Error Messages:
To help the user, we are going to display the error messages

Passing Error Messages
Let's display an error message on the Sign up page, for when the user leaves the input values empty. First, we'll pass the errors array that holds the error messages to the Sign up page's view file: signup.ejs.

          if (errors.length > 0) {
                    <!-- res.redirect("/signup") -->
                    res.render("signup.ejs", {errors: errors})
          }else {
                    next();   // continue with d next step
          }

In signup.ejs, let's display the error messages that are in the errors array using the forEach method.

<% if (errors.length > 0 ) { %>
          <ul class="errors">
                    <% errors.forEach(error => { %>
                              <li> <%= error %>
                    <% }); %>
          </ul>

<% %>


Passing Empty Arrays: ds prevent d error msg being printed wn d signup link is clicked to go d signup page

app.get("/signup", (req, res) => {
          res.render("/signup.ejs", {errors: []})
})


Adding One More Middleware Function
We should prepare a validation that checks for duplicate emails to keep users from registering twice.


Confirming the Process Flow
Let's prepare the middleware function to perform the duplicate emails check so it will be executed in between the empty input value check and sign up.

Adding a Middleware Function
Add the middleware function to perform the check for duplicate emails to the routing for sign up.

app.post("/signup", 
          <!-- middleware fxn to be used -->
          (req, res, next) => {
                    <!-- Empty input value check -->

                    next();
          },

           (req, res, next) => {
                    <!-- Duplicate emails check -->

                    next();
          },

          (req, res) => {
                    <!-- Sign up -->
          }
)


Confirming the Order of the Middleware Function Execution
1. Empty input value check
2. Duplicate emails check 
3. Sign up

Preventing Duplicate Emails
Confirming the Process Flow
If an email is a duplicate, let's pass the error message to the Sign up page. If there isn't a duplicate, then it'll continue on with the sign up process.

Looking for Duplicate Email Addresses
Let's search for the email received from the sign up form to see if it exists in the users table. If it already exists in the table, that means that the email is a duplicate.


app.post("/signup", 
          <!-- middleware fxn to be used -->
          (req, res, next) => {
                    <!-- Empty input value check -->

                    next();
          },

           (req, res, next) => {
                    <!-- Duplicate emails check -->
                    const email = req.body.email;

                    conn.query(
                              "SELECT * FROM users WHERE email = ?",
                              [email],
                              (error, results) => {

                              }
                    )

                    next();
          },

          (req, res) => {
                    <!-- Sign up -->
          }
)

Diverging the Flow Based on Duplicates
In the event that an email is a duplicate, let's pass the errors array to the Sign up page. If it's not a duplicate, let's continue on to the sign up middleware function.

app.post("/signup", 
          <!-- middleware fxn to be used -->
          (req, res, next) => {
                    <!-- Empty input value check -->

                    next();
          },

           (req, res, next) => {
                    <!-- Duplicate emails check -->
                    const email = req.body.email;

                    const errors = [];

                    conn.query(
                              "SELECT * FROM users WHERE email = ?",
                              [email],
                              (error, results) => {
                                        if (results.length > 0) {
                                                  errors.push("Failed to register user')

                                                  res.render("signup.ejs", {errors: errors})
                                        } else {
                                                  next();
                                        }

                              }
                    )

                    next();
          },

          (req, res) => {
                    <!-- Sign up -->
          }
)


Let's Learn about Handling Passwords Securely:
High Security Passwords:
What happened here is a plain string password of ninja was changed into a special string known as hashed password. the password is a complex string. 

bcrypt Package
The bcrypt package will be used to hash passwords and is widely used to take plain text password and hash them, to create highly secure passwords.

bcrypt Package Preparation and Installation
Let's install the bcrypt package using the npm install command. app.js will load the bcrypt package and assign it to the bcrypt constant.

npm install bcrypt

const bcrypt = require("bcrypt")

Introducing Password Hashing:
 Hashing the Password during Sign up.

hash Method
To hash passwords, the hash method of the bcrypt package is used. If you pass a plain text password as the first argument, you can get the hashed password from the hash parameter of the callback function.

app.post("/signup", 
          <!-- middleware fxn to be used -->
          (req, res, next) => {
                    <!-- Empty input value check -->

                    next();
          },

           (req, res, next) => {
                    <!-- Duplicate emails check -->
                    const email = req.body.email;

                    const errors = [];

                    conn.query(
                              "SELECT * FROM users WHERE email = ?",
                              [email],
                              (error, results) => {
                                        if (results.length > 0) {
                                                  errors.push("Failed to register user')

                                                  res.render("signup.ejs", {errors: errors})
                                        } else {
                                                  next();
                                        }

                              }
                    )

                    next();
          },

          (req, res) => {
                    <!-- Sign up -->

                    <!-- 
                              password: plain text password
                              10: password strength, d bigger d value
                              hash: hashed password
                     -->
                    bcrypt.hash(password, 10, (error, hash) => {

                    })
          }
)

Adding to the Database
Let's insert the hashed password into the password column of the users table.

          bcrypt.hash(password, 10, (error, hash) => {
                    conn.query(
                              "INSERT INTO users (username, email, 
                              password) VALUES ( ?, ?, ?)",

                    // insert d hashed password to d password column
                              [username, email, hash],

                              (error, results) => {
                                        req.session.userId = results.insertId;

                                        req.session.username = username;

                                        res.redirect("/list")
                              }
                    )
          })

Change the password constant passed in the second argument of the connection.query to hash. 
  
Note: Do not change the password written in the SQL statement. The password in the SQL statement refers to the password column in the users table.

Fill in the inputs in the form and press the Sign up button.
  
In the users table of the Database tab, check that the password value for the newly created user is hashed.
  
Try to log in as the newly created user. In Your Result of the Browser tab, access the Login page using the URL 
localhost:3000/login
 and log in using the credentials that you've used to create the user.
  
You shouldn't be able to log in as the newly created user! This is because the password sent to the server by the login form for authentication is not hashed, hence user authentication will fail.

Logging in with Hashed Passwords:
Comparing Passwords
To compare the plain text password inputted by the user with the hashed password in the database, the compare method of the bcrypt package is used. The plain text will be hashed inside the method.

app.post("/login", (req, res) => {
          <!-- ................ -->
          const plain = req.body.password;
          const hash = result[0].password;

          <!-- 
                    plain: plain text password
                    hash: hashed password
                    isEqual: comparison result
           -->

          bcrypt.compare(plain, hash, (error, isEqual) => {

          })

          conn.query(
                    "INSERT INTO users (username, email, password) VALUES ( ?, ?, ?)",
                    [username, email, password],
                    (error, result) => {
                              <!-- signup process -->
                    }
          )


})

Changing the Process Based on Comparison Results
If the passwords match, isEqual becomes true. When this happens, the login process is performed. When the passwords don't match, let's redirect the users back to the Login page.

app.post("/login", (req, res) => {
          <!-- ................ -->
          const plain = req.body.password;
          const hash = result[0].password;

          <!-- 
                    plain: plain text password
                    hash: hashed password
                    isEqual: comparison result
           -->

          bcrypt.compare(plain, hash, (error, isEqual) => {

<!-- If isEqual evaluates true (this means the passwords match) -->
                    if (isEqual) {
<!-- if password match, perform login process -->
                              req.session.userId = results[0].id;
                              req.session.username = results[0].username;

                              res.redirect("/list");
                    }else {
                               <!-- if password don't match, redirect tologin page -->
                              res.redirect("/login")
                    }
          })


})



#Progate @progateEN @dev_careers #dev_careers