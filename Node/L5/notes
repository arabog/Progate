This time, we will divide the tasks to complete into 3 parts, 
as shown in the image on the right: 
① Creating a Login Functionality, 
② Creating a Logout Functionality, and 
③ Restricting Access to the Article Details Page.

Checking the Blog's Structure
The blog is constructed from 3 pages. In the app.js file, code is 
written for each of the pages to be displayed. The view files 
for each page are placed in the views folder.

list.ejs            Article page
article.ejs         Article details pg
top.ejs             top pg


Steps to Create a Login Functionality
The login function can be made by: 
① Login Page, 
② User Authentication, and 
③ Session Management, 

Creating a Login Page
Let's make it so the Login page will be displayed. To do this, we'll prepare the route path and the Login page file login.ejs.

Creating a Form for Log in
We're going to prepare a form to input the email and password to be used for user authentication on the Login page. For the password field, define the type attribute with the value password so the inputted values will be hidden.

A Link to the Login Page
Let's add a link to the Login page in the header of the Articles page. For now, we're just going to change the Articles page. After the creation of the login functionality is completed, we'll change the header of the Article Details page.


Let's create the Login page!

1. Prepare the route to display the Login page
2. Display for the Login page
3. Prepare the view file for the login functionality
4. Create a link to the Login page


Creating a User Authentication Process

Preparing the Route Path for the Login Processes
<form action="/login" method="post">
          <p>Email</p>
          <!-- Add the name attribute -->
          <input type="text" name="email">

          <p>Password</p>
          <!-- Add the name attribute -->
          <input type="password" name="password">

          <input type="submit" value="Log in">

          <a href="/list">Back to articles</a>
</form>

app.post("/login", (req, res) => {
          <!-- d email & password goes into req.body.email/password respectively -->
          res.redirect("/list")
})


Route Path /login
At this point, we see that the route path /login is defined for two processes. But because they have different methods (GET and POST), they are treated differently based on the request method.


app.get("/login", (req, res) => {
        <!-- display login page -->
})

app.post("/login", (req, res) => {
        <!-- user authentication -->
})

Let's create the process for log in.
First, let's make it possible to send values from the form on the Login page.


What's user authentication?
User Authentication is a check to confirm the identity of the user. In general, identity confirmation for web applications are a combination of an email and a password.

It is a post method process


Searching for Users
We'll search for the user using the submitted values from the form, and run a SELECT query to get the information of the user that matches the submitted email.

app.post("/login", (req, res) => {
        const email = req.body.email

        connection.query(
                  "SELECT * FROM users WHERE email = ?",
                  [email],
                  (error, results) => {
                            <!--  -->
                  }
        )
})


Use the length property to check the number of elements in the results array. In the case that the number of elements are greater than 0, the user information is found and we proceed to the authentication process.

app.post("/login", (req, res) => {
        const email = req.body.email

        connection.query(
                    "SELECT * FROM users WHERE email = ?",
                    [email],
                    (error, results) => {
                              if( results.length > 0 ) {
                                        <!-- authentication process -->
                              }else {
                                        res.redirect("/login")
                              }
                    }
        )
})


Authenticate the User
To authenticate a user, you have to compare the password received from the form and the password from the result of the query execution. This time we're comparing the two directly without considering security issues. The original method will be introduced in Node.js Study VI.

app.post("/login", (req, res) => {
        const email = req.body.email

        connection.query(
                    "SELECT * FROM users WHERE email = ?",
                    [email],
                    (error, results) => {

                    if( results.length > 0 ) {
                              if (req.body.password === results[0].password) {
                                        console.log("Authentication success")

                                        res.redirect("/list")
                              }else {
                                           console.log("Authentication failed")

                                        res.redirect("/login")
                              }
                    }else {
                              res.redirect("/login")
                    }
        )
})

In order to authenticate the user, we need to compare the password received from the form with the password retrieved from the database query.

Session Management:
session management is when the server manages and holds the state of the client.

Getting Ready to Manage Sessions
To be able to manage sessions, we first have to install the express-session package. After that, we're going to write the necessary information to be able to use express-session

npm install express-session

const session = require("express-session")

app.use(
          session({
                    secret: "my_secret_key",
                    resave: false,
                    saveUninitialized: false,
          })
)

Let's Try Using a Session
First, you have to save the state of the client when user authentication is successful into the session properties.  Then, you use that saved information to display login status.


Saving Data to Session Properties
The express-session package allows you to manage the values passed to the req.session object. Utilizing this, we're going to save the user ID into session properties after user authentication has finished. To save, you write it as: req.session.propertyName = value.

app.post("/login", (req, res) => {
       <!--  -->
          if(req.body.password === results[0].password) {
<!-- sves d d rettrieved user ID as userId in d session ppties -->
                    req.session.userId = results[0].id
          }else {

          }

          <!--  -->
})

Retrieving Data from the Session Properties
To retrieve data from the session properties, you write req.session.propertyName. When doing this, the express-session package automatically checks the session ID that was sent and also gets any corresponding session properties.

app.get("/list", (req, res) => {
       <!--  -->
        const userId = req.session.userId;

        console.log(`User ID: ${userId}`)

          <!--  -->
})

Confirming the Login State
Let's use the user ID that was saved to the session properties to display the login state on the terminal. 

app.get("/list", (req, res) => {
       <!--  -->
        <!-- const userId = req.session.userId;

        console.log(`User ID: ${userId}`) -->

        if(req.session.userId == = undefined) {
                  console.log("You are not logged in")
        }else {
                  console.log("You are logged in")
        }

          <!--  -->
})


Note: You can reload your browser to return to the state where you are not logged in.

Continually Checking the Login State:
 Let us now switch to be able to check the login status in both the Articles page and the Article Details page.

 If you use the app.use function, you will be able to perform the login status check every time there is a request. 


 What's the app.use Function?
The app.use function responds to all requests. For this reason, it's written at the very beginning of routing processes so it can be ran every time. 3 parameters are able to be received by the handler function. They are req, res, and next.


app.use((req, res, next) => {
          <!-- confirmatn of login state -->
          next();
})


What's the next Function?
next received as a parameter of the handler function in the app.use function can be used as a function within the routing process. When the next function is executed, you can run next process that matches a request.

In ds case d next process is 
app.get("/list", (req, res) =>{})

Moving the Login State Check Processes
Finally, let's move the login state check process from app.get('/list', ...) into the app.use function. This way, the session properties will be executed by all every other requests.

app.use((req, res, next) => {
          if( req.session.userId === undefined) {
                    console.log("You are not logged in");
          }else {
                     console.log("You are logged in");
          }

          <!-- confirmatn of login state -->
          next();
})


Displaying the Username in the Header:
you save the username into the session properties and by calling it from the app.use function you can run the process.


Managing the Username Using Sessions
Let's manage the username using sessions. For starters, when log in is successful, the username is to be saved to the session properties. Then, the saved username is called from the session properties into the app.use function.

app.post("/login", (req, res) => {
       <!--  -->
          if(req.body.password === results[0].password) {
<!-- sves d d rettrieved user ID as userId in d session ppties -->
                    req.session.userId = results[0].id;

                    req.session.username = results[0].username;
          }else {

          }

          <!--  -->
})



app.use((req, res, next) => {
          if( req.session.userId === undefined) {
                    console.log("You are not logged in");
          }else {
                     console.log("You are logged in");

                    <!-- retrieve d username 4rm d sessn ppties -->
                     const username = req.session.username;
          }

          <!-- confirmatn of login state -->
          next();
})


Passing the Username to the EJS File
When you use the res.locals object, you are able to pass values to an EJS file even if res.render is not there. It is beneficial to also use the res.locals object when dealing with values that are used throughout the entire application. 

Assigning a Value to res.locals Objects
With res.locals objects, you can assign values using the res.locals.propertyName = value form. The assigned value is able to be used until a response is returned.

app.use((req, res, next) => {

          if( req.session.userId === undefined) {
                    console.log("You are not logged in");

                    res.locals.username = "Guesr";
          }else {
                     console.log("You are logged in");

                    <!-- retrieve d username 4rm d sessn ppties -->
                    
                    <!-- username is assigned wn logged in -->
                     res.locals.username = req.session.username;
          }

          <!-- confirmatn of login state -->
          next();
})

Getting a Value from locals Object:
Let's display the assigned value in list.ejs. The assigned value are converted to locals object in the EJS file. For this reason, when using the value you'll write it as locals.propertyName. Be very careful not to include res when writing it out.

<p> Welcome, <%= locals.username %> </p>

Reusing the Header
What's the include Function?
EJS has a include function that calls another EJS file in a file. 

Moving the Header to a Different File
We'll create a file named header.ejs to bring together the contents of the header. From there, take the header portion of list.ejs and let's move it to header.ejs.

Calling the Header Using include
Let's proceed to display the same header in the Articles page and the Article Details page by calling header.ejs from within list.ejs and article.ejs. When you call a different EJS file, you write it as include(fileName);.

<%- include("heder"); %>

Reuse the header in the other EJS files.
paste ds code inside d header.ejs file

<header>
          <div class="header-nav">
                    <a href="/">BLOG</a>
                    <p>Welcome, <%= locals.username %></p>
                    
                    <ul>
                              <li><a href="/list">Articles</a></li>
                              <li><a href="/login">Log in</a></li>
                    </ul>
          </div>

          <p>Ken's Learning Blog</p>
</header>


Creating a Logout Functionality:
You are considered logged in when you have data stored in your session properties. For log out, all that needs to happen is for the data to be deleted from the session properties.

Preparing a Logout Button and Route Path
Let's prepare the route path and a button for logging out.

Deleting Session Properties
Let's delete the session properties. By writing 

          app.get("/logout", (req, res) => {
                    req.session.destroy( ()=>{ 
                              // process after execution 
                    }), 
          })

you can delete the saved session properties.


Let's Try Redirecting
After deleting the session properties, we're going to redirect to the Articles page. When the deletion process fails, the error parameter of req.session.destroy handler function will contains the information on why it failed.

 app.get("/logout", (req, res) => {
          req.session.destroy( (error)=>{ 
                    res.redirect("/list")
          }), 
})

Switching the Display Using Login Status:
we shall make it so depending on the login status of the user, the login and logout button will change accordingly. 

Preparing a Variable that Determine Login Status
To determine the login status, we'll provide isLoggedin property into the res.locals object. When logged in, true will be assigned to the isLoggedIn property while false will be assigned in when not logged in.

app.use((req, res, next) => {

          if( req.session.userId === undefined) {
                    console.log("You are not logged in");

                    res.locals.username = "Guesr";

                    res.locals.isLoggedIn = false;
          }else {
                     console.log("You are logged in");

                     res.locals.username = req.session.username;

                      res.locals.isLoggedIn = true;
          }

          next();
})

Switching the Displayed Link
We'll prepare a conditional statement in header.ejs, and switch the display of the link depending on the value of the locals.isLoggedIn property.


<header>
          <div class="header-nav">
                    <a href="/">BLOG</a>
                    <p>Welcome, <%= locals.username %></p>

                    <ul>
                              <li><a href="/list">Articles</a></li>
                    
                              <% if (locals.isLoggedIn) { %> 
                                        
                                        <li><a href="/logout">Log out</a></li>
                                        
                              <% } else { %>
                                        <li><a href="/login">Log in</a></li>
                              <% } %>
                    </ul>
          </div>

          <p>Ken's Learning Blog</p>
</header>


Dividing All and Limited Articles
③ Restricting Access to the Article Details Page.

Restricting access to articles is a two-step process. First, we will start with Article Classification.

 articles that are available for all, and articles that are limited to logged in users.

 you are going to add a new category column to the articles table.

 To add a column.... it was... Alter Table ADD...
 ALTER TABLE items ADD COLUMN stock INT

 ALTER TABLE articles ADD COLUMN category TEXT


Let's Change the Display Based on Article Types
Let's make a modification so the display changes depending on the value in the category column. For example, for limited articles, a MEMBERS ONLY badge will be displayed. For now, we display the content of the article for both article types, but we'll change the content to be displayed for limited articles

<div class="article>
        <% if (article.category === "all") { %>
                <h1> <%=  article.title %> </h1>

                <p> <%=  article.content %> </p>
        <% } %>
 
         <% if (article.category === "limited") { %>
                <i> MEMEBERS ONLY </I>

                <h1> <%=  article.title %> </h1>

                <p> <%=  article.content %> </p>
        <% } %>
</div>


Articles are separated into all and limited categories. Let's display badges on articles that are limited.

First, let's differentiate the display in Article Details page based on the category of the article. For a limited article, we'll display a MEMBERS ONLY badge.

 <li>
            <!-- Display the members only badge when the article.category is limited -->
            <% if (article.category === 'limited') {%>
                <i>MEMBERS ONLY</i>
            <% } %>

            <h2><%= article.title %></h2>
            <p><%= article.summary %></p>

            <a href="/article/<%= article.id %>">Read more</a>
</li>

Restricting Access to the Limited Article Details
We will place the restrictions access using the values from the category column and the locals.isLoggedIn property that you made before.

Organizing the Login Status and Restrictions Access
Currently, anyone is able to view the articles. We'll now restrict access of users who are not logged in from viewing limited articles.

Checking the Login Status and Limited Articles Display
Let's check the content displayed for the limited articles. For users who aren't logged in, they'll be prompted with a display to log in.

Displaying Articles When Logged In
We're going to add a conditional branch that uses the values of the locals.isLoggedIn property that manages the users' login state. When the locals.isLoggedIn property value is true, or when a user is logged in, the contents of the article is able to be viewed.

 <li>
            <!-- Display the members only badge when the article.category is limited -->
            <% if (article.category === 'limited') {%>
                <i>MEMBERS ONLY</i>

                <h1><%= article.title %></h1>

                <% if (locals.isLoggedIn) {%>
                        <p><%= article.content %></p>
                 <% } else { %>

                <% } %>
            <% } %>

</li>

Hiding Articles When Not Logged In
When the value is false, or when a user isn't logged in, the contents of the article won't be able to be viewed, and a link to the Login page will be displayed.

<% if (locals.isLoggedIn) {%>
                        <p><%= article.content %></p>
                 <% } else { %>
                        <div class="article-login">
                                <p> Let's log in now </p>>

                                <a class="btn" href="/login"> Log in </a>
                        </div>

                <% } %>
<% } %>

Let's limit what the users can see based on their login state.
The steps are as follows:
1. Create an if statement to check the login state and handle users that are logged in.
2. Handle users that aren't logged in.





#Progate @progateEN @dev_careers #dev_careers
