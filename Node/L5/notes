This time, we will divide the tasks to complete into 3 parts, 
as shown in the image on the right: 
① Creating a Login Functionality, 
② Creating a Logout Functionality, and 
③ Restricting Access to the Article Details Page.

Checking the Blog's Structure
The blog is constructed from 3 pages. In the app.js file, code is 
written for each of the pages to be displayed. The view files 
for each page are placed in the views folder.

list.ejs            Article page
article.ejs         Article details pg
top.ejs             top pg


Steps to Create a Login Functionality
The login function can be made by: 
① Login Page, 
② User Authentication, and 
③ Session Management, 

Creating a Login Page
Let's make it so the Login page will be displayed. To do this, we'll prepare the route path and the Login page file login.ejs.

Creating a Form for Log in
We're going to prepare a form to input the email and password to be used for user authentication on the Login page. For the password field, define the type attribute with the value password so the inputted values will be hidden.

A Link to the Login Page
Let's add a link to the Login page in the header of the Articles page. For now, we're just going to change the Articles page. After the creation of the login functionality is completed, we'll change the header of the Article Details page.


Let's create the Login page!

1. Prepare the route to display the Login page
2. Display for the Login page
3. Prepare the view file for the login functionality
4. Create a link to the Login page


Creating a User Authentication Process

Preparing the Route Path for the Login Processes
<form action="/login" method="post">
          <p>Email</p>
          <!-- Add the name attribute -->
          <input type="text" name="email">

          <p>Password</p>
          <!-- Add the name attribute -->
          <input type="password" name="password">

          <input type="submit" value="Log in">

          <a href="/list">Back to articles</a>
</form>

app.post("/login", (req, res) => {
          <!-- d email & password goes into req.body.email/password respectively -->
          res.redirect("/list")
})


Route Path /login
At this point, we see that the route path /login is defined for two processes. But because they have different methods (GET and POST), they are treated differently based on the request method.


app.get("/login", (req, res) => {
        <!-- display login page -->
})

app.post("/login", (req, res) => {
        <!-- user authentication -->
})

Let's create the process for log in.
First, let's make it possible to send values from the form on the Login page.


What's user authentication?
User Authentication is a check to confirm the identity of the user. In general, identity confirmation for web applications are a combination of an email and a password.

It is a post method process


Searching for Users
We'll search for the user using the submitted values from the form, and run a SELECT query to get the information of the user that matches the submitted email.

app.post("/login", (req, res) => {
        const email = req.body.email

        connection.query(
                  "SELECT * FROM users WHERE email = ?",
                  [email],
                  (error, results) => {
                            <!--  -->
                  }
        )
})


Use the length property to check the number of elements in the results array. In the case that the number of elements are greater than 0, the user information is found and we proceed to the authentication process.

app.post("/login", (req, res) => {
        const email = req.body.email

        connection.query(
                    "SELECT * FROM users WHERE email = ?",
                    [email],
                    (error, results) => {
                              if( results.length > 0 ) {
                                        <!-- authentication process -->
                              }else {
                                        res.redirect("/login")
                              }
                    }
        )
})


Authenticate the User
To authenticate a user, you have to compare the password received from the form and the password from the result of the query execution. This time we're comparing the two directly without considering security issues. The original method will be introduced in Node.js Study VI.

app.post("/login", (req, res) => {
        const email = req.body.email

        connection.query(
                    "SELECT * FROM users WHERE email = ?",
                    [email],
                    (error, results) => {

                    if( results.length > 0 ) {
                              if (req.body.password === results[0].password) {
                                        console.log("Authentication success")

                                        res.redirect("/list")
                              }else {
                                           console.log("Authentication failed")

                                        res.redirect("/login")
                              }
                    }else {
                              res.redirect("/login")
                    }
        )
})

In order to authenticate the user, we need to compare the password received from the form with the password retrieved from the database query.

Session Management:
session management is when the server manages and holds the state of the client.

Getting Ready to Manage Sessions
To be able to manage sessions, we first have to install the express-session package. After that, we're going to write the necessary information to be able to use express-session

npm install express-session

const session = require("express-session")

app.use(
          session({
                    secret: "my_secret_key",
                    resave: false,
                    saveUninitialized: false,
          })
)

Let's Try Using a Session
First, you have to save the state of the client when user authentication is successful into the session properties.  Then, you use that saved information to display login status.


Saving Data to Session Properties
The express-session package allows you to manage the values passed to the req.session object. Utilizing this, we're going to save the user ID into session properties after user authentication has finished. To save, you write it as: req.session.propertyName = value.

app.post("/login", (req, res) => {
       <!--  -->
          if(req.body.password === results[0].password) {
<!-- sves d d rettrieved user ID as userId in d session ppties -->
                    req.session.userId = results[0].id
          }else {

          }

          <!--  -->
})

Retrieving Data from the Session Properties
To retrieve data from the session properties, you write req.session.propertyName. When doing this, the express-session package automatically checks the session ID that was sent and also gets any corresponding session properties.

app.get("/list", (req, res) => {
       <!--  -->
        const userId = req.session.userId;

        console.log(`User ID: ${userId}`)

          <!--  -->
})

Confirming the Login State
Let's use the user ID that was saved to the session properties to display the login state on the terminal. 

app.get("/list", (req, res) => {
       <!--  -->
        <!-- const userId = req.session.userId;

        console.log(`User ID: ${userId}`) -->

        if(req.session.userId == = undefined) {
                  console.log("You are not logged in")
        }else {
                  console.log("You are logged in")
        }

          <!--  -->
})


Note: You can reload your browser to return to the state where you are not logged in.

Continually Checking the Login State:
 Let us now switch to be able to check the login status in both the Articles page and the Article Details page.

 If you use the app.use function, you will be able to perform the login status check every time there is a request. 


 What's the app.use Function?
The app.use function responds to all requests. For this reason, it's written at the very beginning of routing processes so it can be ran every time. 3 parameters are able to be received by the handler function. They are req, res, and next.


app.use((req, res, next) => {
          <!-- confirmatn of login state -->
          next();
})


What's the next Function?
next received as a parameter of the handler function in the app.use function can be used as a function within the routing process. When the next function is executed, you can run next process that matches a request.

In ds case d next process is 
app.get("/list", (req, res) =>{})

Moving the Login State Check Processes
Finally, let's move the login state check process from app.get('/list', ...) into the app.use function. This way, the session properties will be executed by all every other requests.

app.use((req, res, next) => {
          if( req.session.userId === undefined) {
                    console.log("You are not logged in");
          }else {
                     console.log("You are logged in");
          }
          <!-- confirmatn of login state -->
          next();
})


#Progate @progateEN @dev_careers #dev_careers
