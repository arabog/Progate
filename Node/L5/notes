This time, we will divide the tasks to complete into 3 parts, 
as shown in the image on the right: 
① Creating a Login Functionality, 
② Creating a Logout Functionality, and 
③ Restricting Access to the Article Details Page.

Checking the Blog's Structure
The blog is constructed from 3 pages. In the app.js file, code is 
written for each of the pages to be displayed. The view files 
for each page are placed in the views folder.

list.ejs            Article page
article.ejs         Article details pg
top.ejs             top pg


Steps to Create a Login Functionality
The login function can be made by: 
① Login Page, 
② User Authentication, and 
③ Session Management, 

Creating a Login Page
Let's make it so the Login page will be displayed. To do this, we'll prepare the route path and the Login page file login.ejs.

Creating a Form for Log in
We're going to prepare a form to input the email and password to be used for user authentication on the Login page. For the password field, define the type attribute with the value password so the inputted values will be hidden.

A Link to the Login Page
Let's add a link to the Login page in the header of the Articles page. For now, we're just going to change the Articles page. After the creation of the login functionality is completed, we'll change the header of the Article Details page.


Let's create the Login page!

1. Prepare the route to display the Login page
2. Display for the Login page
3. Prepare the view file for the login functionality
4. Create a link to the Login page


Creating a User Authentication Process

Preparing the Route Path for the Login Processes
<form action="/login" method="post">
          <p>Email</p>
          <!-- Add the name attribute -->
          <input type="text" name="email">

          <p>Password</p>
          <!-- Add the name attribute -->
          <input type="password" name="password">

          <input type="submit" value="Log in">

          <a href="/list">Back to articles</a>
</form>

app.post("/login", (req, res) => {
          <!-- d email & password goes into req.body.email/password respectively -->
          res.redirect("/list")
})


Route Path /login
At this point, we see that the route path /login is defined for two processes. But because they have different methods (GET and POST), they are treated differently based on the request method.


app.get("/login", (req, res) => {
        <!-- display login page -->
})

app.post("/login", (req, res) => {
        <!-- user authentication -->
})




#Progate @progateEN @dev_careers #dev_careers
